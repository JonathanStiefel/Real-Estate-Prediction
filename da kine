{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-26T19:15:47.551695Z","iopub.execute_input":"2024-07-26T19:15:47.552223Z","iopub.status.idle":"2024-07-26T19:15:47.562914Z","shell.execute_reply.started":"2024-07-26T19:15:47.552187Z","shell.execute_reply":"2024-07-26T19:15:47.561522Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_train = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\ndf_train.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T19:15:47.565065Z","iopub.execute_input":"2024-07-26T19:15:47.565417Z","iopub.status.idle":"2024-07-26T19:15:47.618053Z","shell.execute_reply.started":"2024-07-26T19:15:47.565387Z","shell.execute_reply":"2024-07-26T19:15:47.616637Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_train.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-26T19:15:47.619602Z","iopub.execute_input":"2024-07-26T19:15:47.620057Z","iopub.status.idle":"2024-07-26T19:15:47.628632Z","shell.execute_reply.started":"2024-07-26T19:15:47.620024Z","shell.execute_reply":"2024-07-26T19:15:47.627453Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_train.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-07-26T19:15:47.632252Z","iopub.execute_input":"2024-07-26T19:15:47.632734Z","iopub.status.idle":"2024-07-26T19:15:47.644591Z","shell.execute_reply.started":"2024-07-26T19:15:47.632693Z","shell.execute_reply":"2024-07-26T19:15:47.643298Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Prepare X,y Variables","metadata":{}},{"cell_type":"code","source":"# create variables\ny = df_train.SalePrice\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd', 'YrSold', 'MSSubClass', 'OverallQual'\n            ,'OverallCond', 'YearRemodAdd','LowQualFinSF','GrLivArea', 'KitchenAbvGr', 'Fireplaces', 'WoodDeckSF', 'OpenPorchSF', 'YrSold'\n\n\n\n\n\n\n]\nX = df_train[features]\n\nfrom sklearn import model_selection\n#Split into training and validation\ntrain_X, val_X, train_y, val_y = model_selection.train_test_split(X, y, random_state=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T19:15:47.646302Z","iopub.execute_input":"2024-07-26T19:15:47.646768Z","iopub.status.idle":"2024-07-26T19:15:47.659070Z","shell.execute_reply.started":"2024-07-26T19:15:47.646727Z","shell.execute_reply":"2024-07-26T19:15:47.657892Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Create Model","metadata":{}},{"cell_type":"code","source":"from sklearn import ensemble\n# Define Model\nrf_model = ensemble.RandomForestRegressor(random_state=1)\n# Fit variables to model\nrf_model.fit(train_X,train_y)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T19:15:47.660778Z","iopub.execute_input":"2024-07-26T19:15:47.661532Z","iopub.status.idle":"2024-07-26T19:15:48.569540Z","shell.execute_reply.started":"2024-07-26T19:15:47.661499Z","shell.execute_reply":"2024-07-26T19:15:48.568379Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prediction = rf_model.predict(val_X)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-26T19:15:48.570807Z","iopub.execute_input":"2024-07-26T19:15:48.571182Z","iopub.status.idle":"2024-07-26T19:15:48.593287Z","shell.execute_reply.started":"2024-07-26T19:15:48.571152Z","shell.execute_reply":"2024-07-26T19:15:48.592085Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Validation","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(val_y, prediction)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T19:15:48.595053Z","iopub.execute_input":"2024-07-26T19:15:48.595391Z","iopub.status.idle":"2024-07-26T19:15:48.603627Z","shell.execute_reply.started":"2024-07-26T19:15:48.595363Z","shell.execute_reply":"2024-07-26T19:15:48.602331Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Model with all data","metadata":{}},{"cell_type":"code","source":"# To improve accuracy, creates Random Forest model to train on all training data\nrf_alldata_model = ensemble.RandomForestRegressor(random_state=1)\nrf_alldata_model.fit(X,y)\n\ndf_test = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/test.csv\")\ntest_X = df_test[features]\ntest_preds = rf_alldata_model.predict(test_X)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T19:15:48.605559Z","iopub.execute_input":"2024-07-26T19:15:48.606061Z","iopub.status.idle":"2024-07-26T19:15:49.817186Z","shell.execute_reply.started":"2024-07-26T19:15:48.606028Z","shell.execute_reply":"2024-07-26T19:15:49.816107Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Generate Submission","metadata":{}},{"cell_type":"code","source":"# Run the code to save predictions in the format used for competition scoring\n\noutput = pd.DataFrame({'Id': df_test.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T19:15:49.819943Z","iopub.execute_input":"2024-07-26T19:15:49.820291Z","iopub.status.idle":"2024-07-26T19:15:49.833021Z","shell.execute_reply.started":"2024-07-26T19:15:49.820261Z","shell.execute_reply":"2024-07-26T19:15:49.831732Z"},"trusted":true},"execution_count":null,"outputs":[]}]}